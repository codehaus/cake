#set( $visible = "public " )
   
    ${visible}static final class ${Type}AddOp implements $util.op("Op"), Serializable {
        /** serialVersionUID. */
        private static final long serialVersionUID = 1L;

        private final $type add;

        ${visible}${Type}AddOp($type add) {
            this.add = add;
        }

        public $type op($type a) {
            return $util.add("a","add");
        }
    }
    
    ${visible}static final class ${Type}SubtractOp implements $util.op("Op"), Serializable {
        /** serialVersionUID. */
        private static final long serialVersionUID = 1L;

        private final $type subtract;

        ${visible}${Type}SubtractOp($type subtract) {
            this.subtract = subtract;
        }

        public $type op($type a) {
            return $util.subtract("a","subtract");
        }
    }
    ${visible}static final class ${Type}DivideOp implements $util.op("Op"), Serializable {
        /** serialVersionUID. */
        private static final long serialVersionUID = 1L;

        private final $type divide;

        ${visible}${Type}DivideOp($type divide) {
            this.divide = divide;
        }

        public $type op($type a) {
            return $util.divide("a","divide");
        }
    }

    ${visible}static final class ${Type}MultiplyOp implements $util.op("Op"), Serializable {
        /** serialVersionUID. */
        private static final long serialVersionUID = 1L;

        private final $type multiply;

        ${visible}${Type}MultiplyOp($type multiply) {
            this.multiply = multiply;
        }

        public $type op($type a) {
            return $util.multiply("a","multiply");
        }
    }

    ${visible}static final class ${Type}ConstantOp implements $util.op("Op"), Serializable {
        /** serialVersionUID. */
        private static final long serialVersionUID = 1L;

        private final $type constant;

        ${visible}${Type}ConstantOp($type constant) {
            this.constant = constant;
        }

        public $type op($type a) {
            return constant;
        }
    }
    
    /** A reducer returning the maximum of two $type elements, using the given comparator. */
    ${visible}static final class ${Type}MaxReducer implements $util.op("Reducer"), Serializable {
        /** serialVersionUID. */
        private static final long serialVersionUID = 1L;

        /** Comparator used when reducing. */
        private final $util.op("Comparator") comparator;

        /**
         * Creates a ${Type}MaxReducer.
         *
         * @param comparator
         *            the comparator to use
         */
        ${visible}${Type}MaxReducer($util.op("Comparator") comparator) {
            if (comparator == null) {
                throw new NullPointerException("comparator is null");
            }
            this.comparator = comparator;
        }

        /** {@inheritDoc} */
        public $type op($type a, $type b) {
            return comparator.compare(a, b) >= 0 ? a : b;
        }
    }

    /** A reducer returning the minimum of two $type elements, using the given comparator. */
    ${visible}static final class ${Type}MinReducer implements $util.op("Reducer"), Serializable {
        /** serialVersionUID. */
        private static final long serialVersionUID = 1L;

        /** Comparator used when reducing. */
        private final $util.op("Comparator") comparator;

        /**
         * Creates a ${Type}MinReducer.
         *
         * @param comparator
         *            the comparator to use
         */
        ${visible}${Type}MinReducer($util.op("Comparator") comparator) {
            if (comparator == null) {
                throw new NullPointerException("comparator is null");
            }
            this.comparator = comparator;
        }

        /** {@inheritDoc} */
        public $type op($type a, $type b) {
            return comparator.compare(a, b) <= 0 ? a : b;
        }
    }