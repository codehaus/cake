   /**
     * Tests {@link ${Type}Ops#ADD_REDUCER} and {@link ${Type}Ops#add()}.
     */
    @Test
    public void add() {
        assertEquals($util.val(3), ${Type}Ops.ADD_REDUCER.op($util.val(1), $util.val(2))${equalTest});
        assertEquals($util.val(3), ${Type}Ops.ADD_REDUCER.op($util.val(2), $util.val(1))${equalTest});
#if($isReal) 
        assertEquals(${object}.POSITIVE_INFINITY, ${Type}Ops.ADD_REDUCER.op(1, ${object}.POSITIVE_INFINITY)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.ADD_REDUCER.op(1, ${object}.NaN)${equalTest});
#end
        assertSame(${Type}Ops.ADD_REDUCER, ${Type}Ops.add());
        ${Type}Ops.ADD_REDUCER.toString(); // does not fail
        TestUtil.assertSingletonSerializable(${Type}Ops.ADD_REDUCER);
    }

    /**
     * Tests {@link ${Type}Ops#add($type)}.
     */
    @Test
    public void addArg() {
        assertEquals($util.val(9), ${Type}Ops.add($util.val(5)).op($util.val(4))${equalTest});
        assertEquals($util.val(9), ${Type}Ops.add($util.val(4)).op($util.val(5))${equalTest});
#if($isReal)
        assertEquals(${object}.POSITIVE_INFINITY, ${Type}Ops.add(5).op(${object}.POSITIVE_INFINITY)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.add(5).op(${object}.NaN)${equalTest});
#end
        ${Type}Ops.add($util.val(9)).toString(); // does not fail
        assertIsSerializable(${Type}Ops.add($util.val(5)));
        assertEquals($util.val(-9), serializeAndUnserialize(${Type}Ops.add($util.val(12))).op($util.val(-21))${equalTest});
    }
    
   /**
     * Tests {@link ${Type}Ops#DIVIDE_REDUCER} and {@link ${Type}Ops#divide()}.
     */
    @Test
    public void divide() {
        assertEquals($util.val(4), ${Type}Ops.DIVIDE_REDUCER.op($util.val(16), $util.val(4))${equalTest});
        assertEquals($util.val(-4), ${Type}Ops.DIVIDE_REDUCER.op($util.val(-8), $util.val(2))${equalTest});
#if($isReal) 
        assertEquals(${object}.POSITIVE_INFINITY, ${Type}Ops.DIVIDE_REDUCER.op(${object}.POSITIVE_INFINITY,1)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.DIVIDE_REDUCER.op(1, ${object}.NaN)${equalTest});
#end
        assertSame(${Type}Ops.DIVIDE_REDUCER, ${Type}Ops.divide());
        ${Type}Ops.DIVIDE_REDUCER.toString(); // does not fail
        TestUtil.assertSingletonSerializable(${Type}Ops.DIVIDE_REDUCER);
    }

    /**
     * Tests {@link ${Type}Ops#divide($type)}.
     */
    @Test
    public void divideArg() {
        assertEquals($util.val(-2), ${Type}Ops.divide($util.val(4)).op($util.val(-8))${equalTest});
        assertEquals($util.val(5), ${Type}Ops.divide($util.val(5)).op($util.val(25))${equalTest});
#if($isReal)
        assertEquals(${object}.POSITIVE_INFINITY, ${Type}Ops.divide(5).op(${object}.POSITIVE_INFINITY)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.divide(5).op(${object}.NaN)${equalTest});
#end
        ${Type}Ops.divide($util.val(9)).toString(); // does not fail
        assertIsSerializable(${Type}Ops.divide($util.val(5)));
        assertEquals($util.val(-4), serializeAndUnserialize(${Type}Ops.divide($util.val(4))).op($util.val(-16))${equalTest});
    }
    
       
       /**
     * Tests {@link ${Type}Ops#MULTIPLY_REDUCER} and {@link ${Type}Ops#multiply()}.
     */
    @Test
    public void multiply() {
        assertEquals($util.val(16), ${Type}Ops.MULTIPLY_REDUCER.op($util.val(4), $util.val(4))${equalTest});
        assertEquals($util.val(-8), ${Type}Ops.MULTIPLY_REDUCER.op($util.val(-4), $util.val(2))${equalTest});
#if($isReal) 
        assertEquals(${object}.POSITIVE_INFINITY, ${Type}Ops.MULTIPLY_REDUCER.op(${object}.POSITIVE_INFINITY,1)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.MULTIPLY_REDUCER.op(1, ${object}.NaN)${equalTest});
#end
        assertSame(${Type}Ops.MULTIPLY_REDUCER, ${Type}Ops.multiply());
        ${Type}Ops.MULTIPLY_REDUCER.toString(); // does not fail
        TestUtil.assertSingletonSerializable(${Type}Ops.MULTIPLY_REDUCER);
    }

    /**
     * Tests {@link ${Type}Ops#multiply($type)}.
     */
    @Test
    public void multiplyArg() {
        assertEquals($util.val(-8), ${Type}Ops.multiply($util.val(4)).op($util.val(-2))${equalTest});
        assertEquals($util.val(25), ${Type}Ops.multiply($util.val(5)).op($util.val(5))${equalTest});
#if($isReal)
        assertEquals(${object}.POSITIVE_INFINITY, ${Type}Ops.multiply(5).op(${object}.POSITIVE_INFINITY)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.multiply(5).op(${object}.NaN)${equalTest});
#end
        ${Type}Ops.multiply($util.val(9)).toString(); // does not fail
        assertIsSerializable(${Type}Ops.multiply($util.val(5)));
        assertEquals($util.val(-16), serializeAndUnserialize(${Type}Ops.multiply($util.val(4))).op($util.val(-4))${equalTest});
    }
    
        /**
     * Tests {@link ${Type}Ops#SUBTRACT_REDUCER} and {@link ${Type}Ops#subtract()}.
     */
    @Test
    public void subtract() {
        assertEquals($util.val(-1), ${Type}Ops.SUBTRACT_REDUCER.op($util.val(1), $util.val(2))${equalTest});
        assertEquals($util.val(1), ${Type}Ops.SUBTRACT_REDUCER.op($util.val(2), $util.val(1))${equalTest});
#if($isReal) 
        assertEquals(${object}.NEGATIVE_INFINITY, ${Type}Ops.SUBTRACT_REDUCER.op(1, ${object}.POSITIVE_INFINITY)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.SUBTRACT_REDUCER.op(1, ${object}.NaN)${equalTest});
#end
        assertSame(${Type}Ops.SUBTRACT_REDUCER, ${Type}Ops.subtract());
        ${Type}Ops.SUBTRACT_REDUCER.toString(); // does not fail
        TestUtil.assertSingletonSerializable(${Type}Ops.SUBTRACT_REDUCER);
    }

    /**
     * Tests {@link ${Type}Ops#subtract($type)}.
     */
    @Test
    public void subtractArg() {
        assertEquals($util.val(-1), ${Type}Ops.subtract($util.val(5)).op($util.val(4))${equalTest});
        assertEquals($util.val(1), ${Type}Ops.subtract($util.val(4)).op($util.val(5))${equalTest});
#if($isReal)
        assertEquals(${object}.POSITIVE_INFINITY, ${Type}Ops.subtract(5).op(${object}.POSITIVE_INFINITY)${equalTest});
        assertEquals(${object}.NaN, ${Type}Ops.subtract(5).op(${object}.NaN)${equalTest});
#end
        ${Type}Ops.subtract($util.val(9)).toString(); // does not fail
        assertIsSerializable(${Type}Ops.subtract($util.val(5)));
        assertEquals($util.val(-33), serializeAndUnserialize(${Type}Ops.subtract($util.val(12))).op($util.val(-21))${equalTest});
    }
