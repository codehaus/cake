    /**
     * A reducer returning the maximum of two $type elements, using natural comparator.
     * The Reducer is serializable.
     */
     static final ${Type}Reducer MAX_REDUCER = (${Type}Reducer) ObjectOps.MAX_REDUCER;

    /**
     * A reducer returning the minimum of two $type elements, using natural comparator.
     * The Reducer is serializable.
     */
     static final ${Type}Reducer MIN_REDUCER = (${Type}Reducer) ObjectOps.MIN_REDUCER;
    /**
     * A reducer returning the maximum of two $type elements, using the specified
     * comparator.
     *
     * @param comparator
     *            the comparator to use when comparing elements
     * @return the newly created reducer
     */
    public static $util.op("Reducer") max($util.op("Comparator") comparator) {
        return new PrimitiveOps.${Type}MaxReducer(comparator);
    }

    /**
     * A reducer returning the minimum of two $type elements, using the specified
     * comparator.
     *
     * @param comparator
     *            the comparator to use when comparing elements
     * @return the newly created reducer
     */
    public static $util.op("Reducer") min($util.op("Comparator") comparator) {
        return new PrimitiveOps.${Type}MinReducer(comparator);
    }
 