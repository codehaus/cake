    /**
     * A comparator for ${type}s relying on natural ordering. The comparator is Serializable.
     */
    public static final ${Type}Comparator COMPARATOR = (${Type}Comparator) Comparators.NATURAL_COMPARATOR;

    /**
     * A comparator that imposes the reverse of the <i>natural ordering</i> on ${type}s. The
     * comparator is Serializable.
     */
    public static final ${Type}Comparator REVERSE_COMPARATOR = (${Type}Comparator) Comparators.NATURAL_REVERSE_COMPARATOR;

    /**
     * Creates a comparator that imposes the reverse ordering of the specified comparator.
     * <p>
     * The returned comparator is serializable (assuming the specified comparator is also
     * serializable).
     * 
     * @param comparator
     *            the comparator to reverse
     * @return a comparator that imposes the reverse ordering of the specified comparator.
     */
    public static ${Type}Comparator reverseOrder(${Type}Comparator comparator) {
        return new PrimitiveOps.Reverse${Type}Comparator(comparator);
    }
    