package org.codehaus.cake.internal.cache.memorystore;/** * An object maintaining a key-value mapping. Nodes provide methods that are intended to used <em>only</em> by the map * creating the node. This includes methods used solely for internal bookkeeping by maps, that must be treating opaquely * by implementation classes. (This requirement stems from the fact that concrete implementations may be required to * subclass {@link java.lang.ref.Reference} or other classes, so a base class cannot be established.) *  * This interface uses raw types as the lesser of evils. Otherwise we'd encounter almost as many unchecked casts when * nodes are used across sets, etc. */public interface Node extends Reclaimable {    /**     * Returns the key established during the creation of this node. Note: This method is named "get" rather than     * "getKey" to simplify usage of Reference keys.     *      * @return the key     */    Object get();    /**     * Returns the locator (hash) established during the creation of this node.     *      * @return the locator     */    int getLocator();    /**     * Returns the value established during the creation of this node or, if since updated, the value set by the most     * recent call to setValue, or throws an exception if value could not be computed     *      * @return the value     * @throws RuntimeException     *             or Error if computeValue failed     */    Object getValue();    /**     * Nodes the value to be returned by the next call to getValue.     *      * @param value     *            the value     */    void setValue(Object value);    /**     * Returns the linkage established during the creation of this node or, if since updated, the linkage set by the     * most recent call to setLinkage.     *      * @return the linkage     */    Node getLinkage();    /**     * Records the linkage to be returned by the next call to getLinkage.     *      * @param linkage     *            the linkage     */    void setLinkage(Node r);}